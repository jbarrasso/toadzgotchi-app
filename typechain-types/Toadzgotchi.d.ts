/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ToadzgotchiInterface extends ethers.utils.Interface {
  functions: {
    "_toadzgotchiNFTContractAddress()": FunctionFragment;
    "fetchToadStats()": FunctionFragment;
    "ownsToadzgotchis()": FunctionFragment;
    "returnMsgSender()": FunctionFragment;
    "toadStats(uint256)": FunctionFragment;
    "toadz(uint256)": FunctionFragment;
    "toadzgotchiIdsOwned()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_toadzgotchiNFTContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchToadStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownsToadzgotchis",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnMsgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toadStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "toadz", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "toadzgotchiIdsOwned",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_toadzgotchiNFTContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchToadStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownsToadzgotchis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toadStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toadz", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toadzgotchiIdsOwned",
    data: BytesLike
  ): Result;

  events: {};
}

export class Toadzgotchi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ToadzgotchiInterface;

  functions: {
    _toadzgotchiNFTContractAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    fetchToadStats(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          isVibing: boolean;
          startVibingTime: BigNumber;
          isFedValue: BigNumber;
          lastFeedBlock: BigNumber;
          isHappyValue: BigNumber;
          lastPlayBlock: BigNumber;
          isRestedValue: BigNumber;
          lastSleepBlock: BigNumber;
          toadXP: BigNumber;
          toadLevel: BigNumber;
        })[]
      ]
    >;

    ownsToadzgotchis(overrides?: CallOverrides): Promise<[boolean]>;

    returnMsgSender(overrides?: CallOverrides): Promise<[string]>;

    toadStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isVibing: boolean;
        startVibingTime: BigNumber;
        isFedValue: BigNumber;
        lastFeedBlock: BigNumber;
        isHappyValue: BigNumber;
        lastPlayBlock: BigNumber;
        isRestedValue: BigNumber;
        lastSleepBlock: BigNumber;
        toadXP: BigNumber;
        toadLevel: BigNumber;
      }
    >;

    toadz(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    toadzgotchiIdsOwned(overrides?: CallOverrides): Promise<[BigNumber[]]>;
  };

  _toadzgotchiNFTContractAddress(overrides?: CallOverrides): Promise<string>;

  fetchToadStats(
    overrides?: CallOverrides
  ): Promise<
    ([
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isVibing: boolean;
      startVibingTime: BigNumber;
      isFedValue: BigNumber;
      lastFeedBlock: BigNumber;
      isHappyValue: BigNumber;
      lastPlayBlock: BigNumber;
      isRestedValue: BigNumber;
      lastSleepBlock: BigNumber;
      toadXP: BigNumber;
      toadLevel: BigNumber;
    })[]
  >;

  ownsToadzgotchis(overrides?: CallOverrides): Promise<boolean>;

  returnMsgSender(overrides?: CallOverrides): Promise<string>;

  toadStats(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isVibing: boolean;
      startVibingTime: BigNumber;
      isFedValue: BigNumber;
      lastFeedBlock: BigNumber;
      isHappyValue: BigNumber;
      lastPlayBlock: BigNumber;
      isRestedValue: BigNumber;
      lastSleepBlock: BigNumber;
      toadXP: BigNumber;
      toadLevel: BigNumber;
    }
  >;

  toadz(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toadzgotchiIdsOwned(overrides?: CallOverrides): Promise<BigNumber[]>;

  callStatic: {
    _toadzgotchiNFTContractAddress(overrides?: CallOverrides): Promise<string>;

    fetchToadStats(
      overrides?: CallOverrides
    ): Promise<
      ([
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isVibing: boolean;
        startVibingTime: BigNumber;
        isFedValue: BigNumber;
        lastFeedBlock: BigNumber;
        isHappyValue: BigNumber;
        lastPlayBlock: BigNumber;
        isRestedValue: BigNumber;
        lastSleepBlock: BigNumber;
        toadXP: BigNumber;
        toadLevel: BigNumber;
      })[]
    >;

    ownsToadzgotchis(overrides?: CallOverrides): Promise<boolean>;

    returnMsgSender(overrides?: CallOverrides): Promise<string>;

    toadStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isVibing: boolean;
        startVibingTime: BigNumber;
        isFedValue: BigNumber;
        lastFeedBlock: BigNumber;
        isHappyValue: BigNumber;
        lastPlayBlock: BigNumber;
        isRestedValue: BigNumber;
        lastSleepBlock: BigNumber;
        toadXP: BigNumber;
        toadLevel: BigNumber;
      }
    >;

    toadz(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toadzgotchiIdsOwned(overrides?: CallOverrides): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    _toadzgotchiNFTContractAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchToadStats(overrides?: CallOverrides): Promise<BigNumber>;

    ownsToadzgotchis(overrides?: CallOverrides): Promise<BigNumber>;

    returnMsgSender(overrides?: CallOverrides): Promise<BigNumber>;

    toadStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toadz(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toadzgotchiIdsOwned(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _toadzgotchiNFTContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchToadStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownsToadzgotchis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnMsgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toadStats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toadz(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toadzgotchiIdsOwned(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
