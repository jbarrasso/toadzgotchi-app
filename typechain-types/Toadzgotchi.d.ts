/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ToadzgotchiInterface extends ethers.utils.Interface {
  functions: {
    "calcDecay(uint256,uint256)": FunctionFragment;
    "feedToad()": FunctionFragment;
    "gethours()": FunctionFragment;
    "grantXP(uint256)": FunctionFragment;
    "playToad()": FunctionFragment;
    "readToadStats()": FunctionFragment;
    "sleepToad()": FunctionFragment;
    "startVibing()": FunctionFragment;
    "toadStats(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcDecay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feedToad", values?: undefined): string;
  encodeFunctionData(functionFragment: "gethours", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantXP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "playToad", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readToadStats",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sleepToad", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startVibing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "toadStats", values: [string]): string;

  decodeFunctionResult(functionFragment: "calcDecay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feedToad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gethours", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantXP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playToad", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readToadStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sleepToad", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startVibing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toadStats", data: BytesLike): Result;

  events: {};
}

export class Toadzgotchi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ToadzgotchiInterface;

  functions: {
    calcDecay(
      lastActionBlock: BigNumberish,
      lastActionValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feedToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gethours(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantXP(
      giveXP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    playToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    readToadStats(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          isVibing: boolean;
          startVibingTime: BigNumber;
          isFedValue: BigNumber;
          lastFeedBlock: BigNumber;
          isHappyValue: BigNumber;
          lastPlayBlock: BigNumber;
          isRestedValue: BigNumber;
          lastSleepBlock: BigNumber;
          toadXP: BigNumber;
          toadLevel: BigNumber;
        }
      ]
    >;

    sleepToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startVibing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toadStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isVibing: boolean;
        startVibingTime: BigNumber;
        isFedValue: BigNumber;
        lastFeedBlock: BigNumber;
        isHappyValue: BigNumber;
        lastPlayBlock: BigNumber;
        isRestedValue: BigNumber;
        lastSleepBlock: BigNumber;
        toadXP: BigNumber;
        toadLevel: BigNumber;
      }
    >;
  };

  calcDecay(
    lastActionBlock: BigNumberish,
    lastActionValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feedToad(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gethours(overrides?: CallOverrides): Promise<BigNumber>;

  grantXP(
    giveXP: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  playToad(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  readToadStats(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isVibing: boolean;
      startVibingTime: BigNumber;
      isFedValue: BigNumber;
      lastFeedBlock: BigNumber;
      isHappyValue: BigNumber;
      lastPlayBlock: BigNumber;
      isRestedValue: BigNumber;
      lastSleepBlock: BigNumber;
      toadXP: BigNumber;
      toadLevel: BigNumber;
    }
  >;

  sleepToad(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startVibing(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toadStats(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isVibing: boolean;
      startVibingTime: BigNumber;
      isFedValue: BigNumber;
      lastFeedBlock: BigNumber;
      isHappyValue: BigNumber;
      lastPlayBlock: BigNumber;
      isRestedValue: BigNumber;
      lastSleepBlock: BigNumber;
      toadXP: BigNumber;
      toadLevel: BigNumber;
    }
  >;

  callStatic: {
    calcDecay(
      lastActionBlock: BigNumberish,
      lastActionValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feedToad(overrides?: CallOverrides): Promise<void>;

    gethours(overrides?: CallOverrides): Promise<BigNumber>;

    grantXP(giveXP: BigNumberish, overrides?: CallOverrides): Promise<void>;

    playToad(overrides?: CallOverrides): Promise<void>;

    readToadStats(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isVibing: boolean;
        startVibingTime: BigNumber;
        isFedValue: BigNumber;
        lastFeedBlock: BigNumber;
        isHappyValue: BigNumber;
        lastPlayBlock: BigNumber;
        isRestedValue: BigNumber;
        lastSleepBlock: BigNumber;
        toadXP: BigNumber;
        toadLevel: BigNumber;
      }
    >;

    sleepToad(overrides?: CallOverrides): Promise<void>;

    startVibing(overrides?: CallOverrides): Promise<void>;

    toadStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isVibing: boolean;
        startVibingTime: BigNumber;
        isFedValue: BigNumber;
        lastFeedBlock: BigNumber;
        isHappyValue: BigNumber;
        lastPlayBlock: BigNumber;
        isRestedValue: BigNumber;
        lastSleepBlock: BigNumber;
        toadXP: BigNumber;
        toadLevel: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    calcDecay(
      lastActionBlock: BigNumberish,
      lastActionValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feedToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gethours(overrides?: CallOverrides): Promise<BigNumber>;

    grantXP(
      giveXP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    playToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    readToadStats(overrides?: CallOverrides): Promise<BigNumber>;

    sleepToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startVibing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toadStats(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calcDecay(
      lastActionBlock: BigNumberish,
      lastActionValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feedToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gethours(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantXP(
      giveXP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    playToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    readToadStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sleepToad(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startVibing(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toadStats(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
