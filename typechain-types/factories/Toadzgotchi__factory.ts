/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Toadzgotchi, ToadzgotchiInterface } from "../Toadzgotchi";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "calcDecayFeed",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "calcDecayPlay",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "calcDecaySleep",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "feedValue",
        type: "int256",
      },
    ],
    name: "feedToad",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "giveXP",
        type: "uint256",
      },
    ],
    name: "grantXP",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isFeedable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isPlayable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isSleepable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "playValue",
        type: "int256",
      },
    ],
    name: "playToad",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadHunger",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadPlay",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadSleep",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadStats",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isVibing",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "startVibingTime",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "isFedValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "lastFeedBlock",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "isHappyValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "lastPlayBlock",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "isRestedValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "lastSleepBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toadXP",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toadLevel",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isDead",
            type: "bool",
          },
        ],
        internalType: "struct Toadzgotchi.ToadStats",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "returnMsgSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "sleepValue",
        type: "int256",
      },
    ],
    name: "sleepToad",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startVibing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "toadStats",
    outputs: [
      {
        internalType: "bool",
        name: "isVibing",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "startVibingTime",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "isFedValue",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "lastFeedBlock",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "isHappyValue",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "lastPlayBlock",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "isRestedValue",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "lastSleepBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toadXP",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toadLevel",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isDead",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506111d6806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806378c90660116100a2578063a37f68e411610071578063a37f68e4146102a4578063ab8bb6d3146102ac578063c6bc5584146102b4578063d60bf8c2146102c7578063e4d1013a146102cf57600080fd5b806378c90660146101ae5780637955b8f9146101b6578063888e3c1a146102795780638acb47b41461028c57600080fd5b80631a457792116100de5780631a457792146101705780632d5d196c146101855780632deb87b1146101985780633d724a3f146101a057600080fd5b80630321be0e146101105780630aa4098f1461012d5780631916fb5e146101425780631a06530714610158575b600080fd5b6101186102e7565b60405190151581526020015b60405180910390f35b61013561036f565b604051610124919061100c565b61014a610466565b604051908152602001610124565b3360009081526020819052604090206006015461014a565b61018361017e366004610f63565b6105f3565b005b610183610193366004610f63565b6106bf565b610118610787565b604051338152602001610124565b61018361086b565b6102226101c4366004610f3c565b600060208190529081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a015460ff998a169a9899979896979596949593949293919291168b565b604080519b15158c5260208c019a909a52988a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152610120830152151561014082015261016001610124565b610183610287366004610f63565b61094e565b3360009081526020819052604090206002015461014a565b61014a610a16565b61014a610b8d565b6101836102c2366004610f63565b610d04565b610118610df5565b3360009081526020819052604090206004015461014a565b336000908152602081905260408120600a015460ff16156103235760405162461bcd60e51b815260040161031a90610fe6565b60405180910390fd5b606461032d610466565b126103695760405162461bcd60e51b815260206004820152600c60248201526b151bd859081a5cc8199d5b1b60a21b604482015260640161031a565b50600190565b6103d06040518061016001604052806000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b503360009081526020818152604091829020825161016081018452815460ff908116151582526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a015416151561014082015290565b33600090815260208190526040812060030154819081906104879043611149565b90506001811161049a57600091506105bf565b600281101580156104ac575060048111155b156104ba57600a91506105bf565b600581101580156104cc575060078111155b156104da57601491506105bf565b600881101580156104ec5750600a8111155b156104fa57601e91506105bf565b600b811015801561050c5750600d8111155b1561051a57602891506105bf565b600e811015801561052c575060108111155b1561053a57603291506105bf565b6011811015801561054c575060138111155b1561055a57603c91506105bf565b6014811015801561056c575060168111155b1561057a57604691506105bf565b6017811015801561058c575060198111155b1561059a57605091506105bf565b601a81101580156105ac5750601c8111155b156105ba57605a91506105bf565b606e91505b336000908152602081905260408120600201546105dd90849061110a565b905060008112156105ec575060005b9392505050565b6105fb610df5565b61063f5760405162461bcd60e51b8152602060048201526015602482015274546f6164206973206e6f7420736c65657061626c6560581b604482015260640161031a565b610647610a16565b336000908152602081905260409020600601819055610667908290611091565b3360009081526020819052604090206006018190556064121561069c5733600090815260208190526040902060646006909101555b336000908152602081905260409020436007909101556106bc6032610d04565b50565b6106c7610787565b61070a5760405162461bcd60e51b8152602060048201526014602482015273546f6164206973206e6f7420706c617961626c6560601b604482015260640161031a565b610712610b8d565b336000908152602081905260409020600401819055610732908290611091565b336000908152602081905260409020600401819055606412156107675733600090815260208190526040902060646004909101555b336000908152602081905260409020436005909101556106bc6046610d04565b33600090815260208190526040812060060154601e13156107ea5760405162461bcd60e51b815260206004820152601d60248201527f546f61642063616e6e6f7420706c6179207768696c6520736c65657079000000604482015260640161031a565b336000908152602081905260409020600a015460ff161561081d5760405162461bcd60e51b815260040161031a90610fe6565b6064610827610b8d565b126103695760405162461bcd60e51b8152602060048201526014602482015273151bd859081a5cc8199d5b1b1e481c1b185e595960621b604482015260640161031a565b3360009081526020819052604090205460ff16156108c45760405162461bcd60e51b8152602060048201526016602482015275546f616420697320616c726561647920766962696e6760501b604482015260640161031a565b3360009081526020818152604091829020805460ff1916600190811782554382820181905560098301919091556032600283018190556003830182905560048301819055600583018290556006830155600790910155815160608101909252602a80835261094c92916111779083013933600081815260208190526040902060010154610ed9565b565b6109566102e7565b6109995760405162461bcd60e51b8152602060048201526014602482015273546f6164206973206e6f74206665656461626c6560601b604482015260640161031a565b6109a1610466565b3360009081526020819052604090206002018190556109c1908290611091565b336000908152602081905260409020600201819055606412156109f65733600090815260208190526040902060646002909101555b336000908152602081905260409020436003909101556106bc601e610d04565b3360009081526020819052604081206007015481908190610a379043611149565b905060018111610a4a5760009150610b6f565b60028110158015610a5c575060048111155b15610a6a57600a9150610b6f565b60058110158015610a7c575060078111155b15610a8a5760149150610b6f565b60088110158015610a9c5750600a8111155b15610aaa57601e9150610b6f565b600b8110158015610abc5750600d8111155b15610aca5760289150610b6f565b600e8110158015610adc575060108111155b15610aea5760329150610b6f565b60118110158015610afc575060138111155b15610b0a57603c9150610b6f565b60148110158015610b1c575060168111155b15610b2a5760469150610b6f565b60178110158015610b3c575060198111155b15610b4a5760509150610b6f565b601a8110158015610b5c5750601c8111155b15610b6a57605a9150610b6f565b606e91505b336000908152602081905260408120600601546105dd90849061110a565b3360009081526020819052604081206005015481908190610bae9043611149565b905060018111610bc15760009150610ce6565b60028110158015610bd3575060048111155b15610be157600a9150610ce6565b60058110158015610bf3575060078111155b15610c015760149150610ce6565b60088110158015610c135750600a8111155b15610c2157601e9150610ce6565b600b8110158015610c335750600d8111155b15610c415760289150610ce6565b600e8110158015610c53575060108111155b15610c615760329150610ce6565b60118110158015610c73575060138111155b15610c8157603c9150610ce6565b60148110158015610c93575060168111155b15610ca15760469150610ce6565b60178110158015610cb3575060198111155b15610cc15760509150610ce6565b601a8110158015610cd35750601c8111155b15610ce157605a9150610ce6565b606e91505b336000908152602081905260408120600401546105dd90849061110a565b336000908152602081905260408120600901548190610d2390846110ea565b33600090815260208190526040902060080154909150610d449082906110d2565b336000908152602081905260409020600801819055606411610df0573360009081526020819052604090206008015460641015610d9d5733600090815260208190526040902060080154610d9a90606490611149565b91505b33600090815260208190526040902060090154610dbb9060016110d2565b33600090815260208190526040812060090191909155610ddc9083906110d2565b336000908152602081905260409020600801555b505050565b3360009081526020819052604081206002015460141315610e585760405162461bcd60e51b815260206004820181905260248201527f546f61642063616e6e6f7420736c656570207768696c65207374617276696e67604482015260640161031a565b336000908152602081905260409020600a015460ff1615610e8b5760405162461bcd60e51b815260040161031a90610fe6565b6064610e95610a16565b126103695760405162461bcd60e51b8152602060048201526014602482015273151bd859081a5cc8199d5b1b1e481c995cdd195960621b604482015260640161031a565b610df0838383604051602401610ef193929190610f7b565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b17905280516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060208284031215610f4d578081fd5b81356001600160a01b03811681146105ec578182fd5b600060208284031215610f74578081fd5b5035919050565b6060815260008451806060840152815b81811015610fa85760208188018101516080868401015201610f8b565b81811115610fb95782608083860101525b506001600160a01b039490941660208301525060408101919091526080601f909201601f19160101919050565b6020808252600c908201526b151bd859081a5cc81919585960a21b604082015260600190565b81511515815261016081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401518184015250610140808401516110898285018215159052565b505092915050565b600080821280156001600160ff1b03849003851316156110b3576110b3611160565b600160ff1b83900384128116156110cc576110cc611160565b50500190565b600082198211156110e5576110e5611160565b500190565b60008261110557634e487b7160e01b81526012600452602481fd5b500490565b60008083128015600160ff1b85018412161561112857611128611160565b6001600160ff1b038401831381161561114357611143611160565b50500390565b60008282101561115b5761115b611160565b500390565b634e487b7160e01b600052601160045260246000fdfe272573272068617320737461727465642067616d6520617420626c6f636b206e756d6265722027257327a26469706673582212209c8bc84076ce10b6ddb599675295c40123183ccada3b1b538c10e50b0f0dd2b564736f6c63430008040033";

export class Toadzgotchi__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Toadzgotchi> {
    return super.deploy(overrides || {}) as Promise<Toadzgotchi>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Toadzgotchi {
    return super.attach(address) as Toadzgotchi;
  }
  connect(signer: Signer): Toadzgotchi__factory {
    return super.connect(signer) as Toadzgotchi__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ToadzgotchiInterface {
    return new utils.Interface(_abi) as ToadzgotchiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Toadzgotchi {
    return new Contract(address, _abi, signerOrProvider) as Toadzgotchi;
  }
}
