/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Toadzgotchi, ToadzgotchiInterface } from "../Toadzgotchi";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newHungerValue",
        type: "uint256",
      },
    ],
    name: "feedToad",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadHunger",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadPlay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadSleep",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadStats",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isInSwamp",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "hungerValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "playValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sleepValue",
            type: "uint256",
          },
        ],
        internalType: "struct Toadzgotchi.ToadStats",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "returnMsgSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "toadStats",
    outputs: [
      {
        internalType: "bool",
        name: "isInSwamp",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "hungerValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "playValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sleepValue",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109ec806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806389b39bf61161005b57806389b39bf61461011a5780638acb47b414610136578063d65ab5f214610154578063e4d1013a1461015e57610088565b80630aa4098f1461008d5780631a065307146100ab5780633d724a3f146100c95780637955b8f9146100e7575b600080fd5b61009561017c565b6040516100a29190610884565b60405180910390f35b6100b361020b565b6040516100c0919061089f565b60405180910390f35b6100d1610254565b6040516100de91906107a8565b60405180910390f35b61010160048036038101906100fc919061067d565b61025c565b60405161011194939291906107c3565b60405180910390f35b610134600480360381019061012f91906106a6565b610299565b005b61013e610346565b60405161014b919061089f565b60405180910390f35b61015c61038f565b005b610166610479565b604051610173919061089f565b60405180910390f35b610184610629565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900460ff161515151581526020016001820154815260200160028201548152602001600382015481525050905090565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154905090565b600033905090565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154905084565b6102fd604051806060016040528060268152602001610991602691396000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154836104c2565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905090565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055506104776040518060400160405280601b81526020017f272573272068617320737461727465642067616d652e20272573270000000000815250336000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610561565b565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905090565b61055c8383836040516024016104da93929190610846565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610600565b505050565b6105fb83838360405160240161057993929190610808565b6040516020818303038152906040527fc91d5ed4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610600565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b60008135905061066281610962565b92915050565b60008135905061067781610979565b92915050565b60006020828403121561068f57600080fd5b600061069d84828501610653565b91505092915050565b6000602082840312156106b857600080fd5b60006106c684828501610668565b91505092915050565b6106d8816108d6565b82525050565b6106e7816108e8565b82525050565b6106f6816108e8565b82525050565b6000610707826108ba565b61071181856108c5565b935061072181856020860161091e565b61072a81610951565b840191505092915050565b60808201600082015161074b60008501826106de565b50602082015161075e602085018261078a565b506040820151610771604085018261078a565b506060820151610784606085018261078a565b50505050565b61079381610914565b82525050565b6107a281610914565b82525050565b60006020820190506107bd60008301846106cf565b92915050565b60006080820190506107d860008301876106ed565b6107e56020830186610799565b6107f26040830185610799565b6107ff6060830184610799565b95945050505050565b6000606082019050818103600083015261082281866106fc565b905061083160208301856106cf565b61083e60408301846106ed565b949350505050565b6000606082019050818103600083015261086081866106fc565b905061086f6020830185610799565b61087c6040830184610799565b949350505050565b60006080820190506108996000830184610735565b92915050565b60006020820190506108b46000830184610799565b92915050565b600081519050919050565b600082825260208201905092915050565b60006108e1826108f4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561093c578082015181840152602081019050610921565b8381111561094b576000848401525b50505050565b6000601f19601f8301169050919050565b61096b816108d6565b811461097657600080fd5b50565b61098281610914565b811461098d57600080fd5b5056fe4368616e67696e672068756e67657256616c75652066726f6d202725732720746f2027257327a26469706673582212209f4f5f3c83284dfe03c09e7cb9881a05f2be3a4a25d15d38bb63f097f72e703b64736f6c63430008040033";

export class Toadzgotchi__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Toadzgotchi> {
    return super.deploy(overrides || {}) as Promise<Toadzgotchi>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Toadzgotchi {
    return super.attach(address) as Toadzgotchi;
  }
  connect(signer: Signer): Toadzgotchi__factory {
    return super.connect(signer) as Toadzgotchi__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ToadzgotchiInterface {
    return new utils.Interface(_abi) as ToadzgotchiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Toadzgotchi {
    return new Contract(address, _abi, signerOrProvider) as Toadzgotchi;
  }
}
