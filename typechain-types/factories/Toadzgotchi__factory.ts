/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Toadzgotchi, ToadzgotchiInterface } from "../Toadzgotchi";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastActionBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastActionValue",
        type: "uint256",
      },
    ],
    name: "calcDecay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feedToad",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gethours",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "giveXP",
        type: "uint256",
      },
    ],
    name: "grantXP",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "playToad",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "readToadStats",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isVibing",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "startVibingTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "isFedValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastFeedBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "isHappyValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastPlayBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "isRestedValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastSleepBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toadXP",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "toadLevel",
            type: "uint256",
          },
        ],
        internalType: "struct Toadzgotchi.ToadStats",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sleepToad",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startVibing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "toadStats",
    outputs: [
      {
        internalType: "bool",
        name: "isVibing",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "startVibingTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "isFedValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastFeedBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "isHappyValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastPlayBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "isRestedValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastSleepBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toadXP",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toadLevel",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ce8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637955b8f9116100665780637955b8f9146101535780639825ccc114610202578063a98effb11461020a578063c6bc558414610212578063e0e89fcb1461022557600080fd5b80630aa4098f146100985780634281fd0b146101205780635ce39cd31461012a57806378c906601461014b575b600080fd5b6100a061022d565b604051610117919081511515815261014081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b60405180910390f35b61012861030d565b005b61013d610138366004610af8565b6104d1565b604051908152602001610117565b610128610539565b6101b6610161366004610ab2565b600060208190529081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460099099015460ff9098169896979596949593949293919290918a565b604080519a15158b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e084015261010083015261012082015261014001610117565b61013d61061b565b610128610664565b610128610220366004610ae0565b6107a2565b610128610893565b6102856040518061014001604052806000151581526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b503360009081526020818152604091829020825161014081018452815460ff16151581526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015260099091015461012082015290565b3360009081526020819052604090206005810154600490910154606091610333916104d1565b1061037c5760405162461bcd60e51b8152602060048201526014602482015273151bd859081a5cc8199d5b1b1e481c1b185e595960621b60448201526064015b60405180910390fd5b33600090815260208190526040902060078101546006909101546030916103a2916104d1565b116103ef5760405162461bcd60e51b815260206004820152601c60248201527f546f61642063616e277420706c6179207768696c6520736c65657079000000006044820152606401610373565b336000908152602081905260409020600381015460029091015461041391906104d1565b61042f5760405162461bcd60e51b815260040161037390610b84565b336000908152602081905260409020600581015460049091015461045391906104d1565b61046f5760405162461bcd60e51b815260040161037390610bae565b336000908152602081905260409020600781015460069091015461049391906104d1565b6104af5760405162461bcd60e51b815260040161037390610bd9565b336000908152602081905260409020436005909101556104cf60646107a2565b565b600080603c806104e18643610c5b565b6104ec90600f610c3c565b6104f69190610c1c565b6105009190610c1c565b9050600061050f826004610c3c565b905060008482111561052357506000610530565b61052d8286610c5b565b90505b95945050505050565b3360009081526020819052604090205460ff16156105925760405162461bcd60e51b8152602060048201526016602482015275546f616420697320616c726561647920766962696e6760501b6044820152606401610373565b3360009081526020818152604091829020805460ff191660019081178255438282018190556009830191909155606060028301819055600383018290556004830181905560058301829055600683018190556007909201558251908101909252602a8083526104cf9291610c899083013933600081815260208190526040902060010154610a4f565b336000908152602081905260408120600301548190603c90819061063f9043610c5b565b61064a90600f610c3c565b6106549190610c1c565b61065e9190610c1c565b92915050565b336000908152602081905260409020600381015460029091015460609161068a916104d1565b106106c65760405162461bcd60e51b815260206004820152600c60248201526b151bd859081a5cc8199d5b1b60a21b6044820152606401610373565b33600090815260208190526040902060038101546002909101546106ea91906104d1565b6107065760405162461bcd60e51b815260040161037390610b84565b336000908152602081905260409020600581015460049091015461072a91906104d1565b6107465760405162461bcd60e51b815260040161037390610bae565b336000908152602081905260409020600781015460069091015461076a91906104d1565b6107865760405162461bcd60e51b815260040161037390610bd9565b336000908152602081905260409020436003909101556104cf603c5b3360009081526020819052604081206009015481906107c19084610c1c565b336000908152602081905260409020600801549091506107e2908290610c04565b33600090815260208190526040902060080181905560641161088e57336000908152602081905260409020600801546064101561083b573360009081526020819052604090206008015461083890606490610c5b565b91505b33600090815260208190526040902060090154610859906001610c04565b3360009081526020819052604081206009019190915561087a908390610c04565b336000908152602081905260409020600801555b505050565b33600090815260208190526040902060078101546006909101546060916108b9916104d1565b106108fd5760405162461bcd60e51b8152602060048201526014602482015273151bd859081a5cc8199d5b1b1e481c995cdd195960621b6044820152606401610373565b33600090815260208181526040909120600381015460029091015461092291906104d1565b1161096f5760405162461bcd60e51b815260206004820152601f60248201527f546f61642063616e277420736c656570207768696c65207374617276696e67006044820152606401610373565b336000908152602081905260409020600381015460029091015461099391906104d1565b6109af5760405162461bcd60e51b815260040161037390610b84565b33600090815260208190526040902060058101546004909101546109d391906104d1565b6109ef5760405162461bcd60e51b815260040161037390610bae565b3360009081526020819052604090206007810154600690910154610a1391906104d1565b610a2f5760405162461bcd60e51b815260040161037390610bd9565b336000908152602081905260409020436007909101556104cf60506107a2565b61088e838383604051602401610a6793929190610b19565b60408051601f198184030181529190526020810180516001600160e01b03166307c8121760e01b17905280516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060208284031215610ac3578081fd5b81356001600160a01b0381168114610ad9578182fd5b9392505050565b600060208284031215610af1578081fd5b5035919050565b60008060408385031215610b0a578081fd5b50508035926020909101359150565b6060815260008451806060840152815b81811015610b465760208188018101516080868401015201610b29565b81811115610b575782608083860101525b506001600160a01b039490941660208301525060408101919091526080601f909201601f19160101919050565b60208082526010908201526f546f6164206973207374617276696e6760801b604082015260600190565b602080825260119082015270546f6164206973206e6f7420686170707960781b604082015260600190565b602080825260119082015270151bd859081a5cc81b9bdd081cdb195c1d607a1b604082015260600190565b60008219821115610c1757610c17610c72565b500190565b600082610c3757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610c5657610c56610c72565b500290565b600082821015610c6d57610c6d610c72565b500390565b634e487b7160e01b600052601160045260246000fdfe272573272068617320737461727465642067616d6520617420626c6f636b206e756d6265722027257327a26469706673582212206707e891f92cdce3b4a0b29f7b07aef00a869707594dfddf800cc44f8ea97f5464736f6c63430008040033";

export class Toadzgotchi__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Toadzgotchi> {
    return super.deploy(overrides || {}) as Promise<Toadzgotchi>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Toadzgotchi {
    return super.attach(address) as Toadzgotchi;
  }
  connect(signer: Signer): Toadzgotchi__factory {
    return super.connect(signer) as Toadzgotchi__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ToadzgotchiInterface {
    return new utils.Interface(_abi) as ToadzgotchiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Toadzgotchi {
    return new Contract(address, _abi, signerOrProvider) as Toadzgotchi;
  }
}
